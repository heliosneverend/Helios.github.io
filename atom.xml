<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heliso</title>
  
  <subtitle>记录平时学习到的东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-05T08:35:39.854Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zyf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在tableView显示不同的背景色</title>
    <link href="http://yoursite.com/2018/09/05/%E5%9C%A8tableView%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E8%83%8C%E6%99%AF%E8%89%B2/"/>
    <id>http://yoursite.com/2018/09/05/在tableView显示不同的背景色/</id>
    <published>2018-09-05T08:20:18.000Z</published>
    <updated>2018-09-05T08:35:39.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>UITableView或UICollectionView和UIScrollView在添加下拉刷新的时候,业务需求在refreshControl显示特定的颜色 不同于UITableView.backgroundColor</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><h3 id="croll在UITableView图层下面添加一个固定高度的View去填充你想要的颜色"><a href="#croll在UITableView图层下面添加一个固定高度的View去填充你想要的颜色" class="headerlink" title="croll在UITableView图层下面添加一个固定高度的View去填充你想要的颜色"></a>croll在UITableView图层下面添加一个固定高度的View去填充你想要的颜色</h3><p>这个方案在数据较少的时候会出现问题</p><h3 id="在UITableView-图层下面添加一个View-在-void-scrollViewDidScroll-UIScrollView-scrollView代理方法里面监听scrollView-contentOffSet-y去动态的改变View的高度"><a href="#在UITableView-图层下面添加一个View-在-void-scrollViewDidScroll-UIScrollView-scrollView代理方法里面监听scrollView-contentOffSet-y去动态的改变View的高度" class="headerlink" title="在UITableView 图层下面添加一个View 在- (void)scrollViewDidScroll:(UIScrollView *)scrollView代理方法里面监听scrollView.contentOffSet.y去动态的改变View的高度"></a>在UITableView 图层下面添加一个View 在- (void)scrollViewDidScroll:(UIScrollView *)scrollView代理方法里面监听scrollView.contentOffSet.y去动态的改变View的高度</h3><p>这种方法在松手的一瞬间出出现短暂的颜色问题 同时也会消耗额外的CPU性能 不是最优解</p><h3 id="在TableView上添加一个子视图-让改视图超出tableView的边界"><a href="#在TableView上添加一个子视图-让改视图超出tableView的边界" class="headerlink" title="在TableView上添加一个子视图,让改视图超出tableView的边界"></a>在TableView上添加一个子视图,让改视图超出tableView的边界</h3><h4 id="OC"><a href="#OC" class="headerlink" title="OC"></a>OC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CGRect frame = self.tableView.bounds;</span><br><span class="line">frame.origin.y = -frame.size.height;</span><br><span class="line">UIView* grayView = [[UIView alloc] initWithFrame:frame];</span><br><span class="line">grayView.backgroundColor = [UIColor grayColor];</span><br><span class="line">[self.tableView addSubview:grayView];</span><br></pre></td></tr></table></figure><h4 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extension UITableView &#123;</span><br><span class="line">    func addTopBounceAreaView(color: UIColor = .white) &#123;</span><br><span class="line">        var frame = self.bounds</span><br><span class="line">        frame.origin.y = -frame.size.height</span><br><span class="line">        let view = UIView(frame: frame)</span><br><span class="line">        view.backgroundColor = color</span><br><span class="line">        self.addSubview(view)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/1114587/different-background-colors-for-the-top-and-bottom-of-a-uitableview/51077378#51077378" target="_blank" rel="noopener">参考地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;UITableView或UICollectionView和UIScrollView在添加下拉刷新的时候,业务需求在refre
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Shell流程控制</title>
    <link href="http://yoursite.com/2018/09/03/Shell%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2018/09/03/Shell流程控制/</id>
    <published>2018-09-03T09:29:25.957Z</published>
    <updated>2018-09-03T10:21:15.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以if-else为例:</span><br><span class="line">a=10</span><br><span class="line">b=12</span><br><span class="line">if [$a == $b]</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">else </span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="if-elseif-else语句"><a href="#if-elseif-else语句" class="headerlink" title="if - elseif -else语句"></a>if - elseif -else语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [$a == $b]</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">elif [条件]</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">else</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for name in &quot;Mike&quot; &quot;John&quot; &quot;Andy&quot;</span><br><span class="line">do </span><br><span class="line">echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="从变量读取列表"><a href="#从变量读取列表" class="headerlink" title="从变量读取列表"></a>从变量读取列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#⚠️此处需要使用转义符号来输出&apos;</span><br><span class="line">for name in I don\&apos;t know</span><br><span class="line">do </span><br><span class="line">echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="读取目录文件"><a href="#读取目录文件" class="headerlink" title="读取目录文件"></a>读取目录文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#⚠️此处需要使用通配符*</span><br><span class="line">fileUrl=&quot;/users/yzy/desktop/*&quot;</span><br><span class="line">for file in fileUrl</span><br><span class="line">do </span><br><span class="line">echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="条件循环"><a href="#条件循环" class="headerlink" title="条件循环"></a>条件循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((a=1 ; a &lt; 5; a++))</span><br><span class="line">do </span><br><span class="line">echo %a</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for ((a=1 ; a &lt; 5; a++))</span><br><span class="line">do </span><br><span class="line">for ((b=1; b &lt; 5; b++))</span><br><span class="line">do </span><br><span class="line">...</span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (($a &lt; 10))</span><br><span class="line">do</span><br><span class="line">...</span><br><span class="line">done</span><br><span class="line">while无限循环：</span><br><span class="line">while true或者while :</span><br></pre></td></tr></table></figure><h2 id="switch条件选择语句"><a href="#switch条件选择语句" class="headerlink" title="switch条件选择语句"></a>switch条件选择语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number=1</span><br><span class="line">case $number in</span><br><span class="line">1) echo &quot;等于1&quot;</span><br><span class="line">;;</span><br><span class="line">2) echo &quot;等于2&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>跟while相反，当条件为false时候进入循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until 条件</span><br><span class="line">do </span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="break退出循环"><a href="#break退出循环" class="headerlink" title="break退出循环"></a>break退出循环</h2><p>如果是循环嵌套的话，break写在内部循环中，当执行时只会退出内部循环。</p><p>⚠️如果想一下子退出多层循环，可：<br>break 2 在break后接层数</p><h2 id="continue结束当前循环"><a href="#continue结束当前循环" class="headerlink" title="continue结束当前循环"></a>continue结束当前循环</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerlink&quot; title=&quot;if语句&quot;&gt;&lt;/a&gt;if语句&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>黑魔法Clang Attribute</title>
    <link href="http://yoursite.com/2018/09/03/%E9%BB%91%E9%AD%94%E6%B3%95Clang%20Attribute/"/>
    <id>http://yoursite.com/2018/09/03/黑魔法Clang Attribute/</id>
    <published>2018-09-03T03:07:16.000Z</published>
    <updated>2018-09-03T07:43:10.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Clang-Attribute-说明"><a href="#Clang-Attribute-说明" class="headerlink" title="Clang Attribute 说明"></a>Clang Attribute 说明</h1><p>Clang Attribute 是Clang提供的一种源码注解,一般以<strong>attribute</strong>(xxx) 的形式出现在代码中</p><h1 id="constructor-destructor"><a href="#constructor-destructor" class="headerlink" title="constructor / destructor"></a>constructor / destructor</h1><p>构造器和析构器，加上这两个属性的函数会在分别在可执行文件（或 shared library）load 和 unload 时被调用，可以理解为在 main() 函数调用前和 return 后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((constructor))</span><br><span class="line">static void beforeMain(void) &#123;</span><br><span class="line">NSLog(@&quot;beforeMain&quot;);</span><br><span class="line">&#125;</span><br><span class="line">__attribute__((destructor))</span><br><span class="line">static void afterMain(void) &#123;</span><br><span class="line">NSLog(@&quot;afterMain&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">NSLog(@&quot;main&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Console:</span><br><span class="line">// &quot;beforeMain&quot; -&gt; &quot;main&quot; -&gt; &quot;afterMain&quot;</span><br></pre></td></tr></table></figure></p><p>constructor 和 +load 都是在 main 函数执行前调用，但 +load 比 constructor 更加早一丢丢，因为 dyld（动态链接器，程序的最初起点）在加载 image（可以理解成 Mach-O 文件）时会先通知 objc runtime 去加载其中所有的类，每加载一个类时，它的 +load 随之调用，全部加载完成后，dyld 才会调用这个 image 中所有的 constructor 方法。<br>所以 constructor 是一个干坏事的绝佳时机：<br>所有 Class 都已经加载完成<br>main 函数还未执行<br>无需像 +load 还得挂载在一个 Class 中<br>FDStackView 的 FDStackViewPatchEntry 方法便是使用的这个时机来实现偷天换日的伎俩。<br>PS：若有多个 constructor 且想控制优先级的话，可以写成 <strong>attribute</strong>((constructor(101)))，里面的数字越小优先级越高，1 ~ 100 为系统保留。</p><h1 id="enable-if"><a href="#enable-if" class="headerlink" title="enable_if"></a>enable_if</h1><p>这个属性只能用在 C 函数上，可以用来实现参数的静态检查：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static void printValidAge(int age)</span><br><span class="line">__attribute__((enable_if(age &gt; 0 &amp;&amp; age &lt; 120, &quot;你火星人？&quot;))) &#123;</span><br><span class="line">printf(&quot;%d&quot;, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它表示调用这个函数时必须满足 age &gt; 0 &amp;&amp; age &lt; 120 才被允许，于是乎：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printValidAge(26); // √</span><br><span class="line">printValidAge(150); // &lt;--- Compile Error</span><br><span class="line">printValidAge(-1); // &lt;--- Compile Error</span><br></pre></td></tr></table></figure></p><h1 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h1><p>声明到一个变量上，当这个变量作用域结束时，调用指定的一个函数，Reactive Cocoa 用这个特性实现了神奇的 @onExit</p><h1 id="overloadable"><a href="#overloadable" class="headerlink" title="overloadable"></a>overloadable</h1><p>用于 C 函数，可以定义若干个函数名相同，但参数不同的方法，调用时编译器会自动根据参数选择函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((overloadable)) void logAnything(id obj) &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, obj);</span><br><span class="line">&#125;</span><br><span class="line">__attribute__((overloadable)) void logAnything(int number) &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, @(number));</span><br><span class="line">&#125;</span><br><span class="line">__attribute__((overloadable)) void logAnything(CGRect rect) &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, NSStringFromCGRect(rect));</span><br><span class="line">&#125;</span><br><span class="line">// Tests</span><br><span class="line">logAnything(@[@&quot;1&quot;, @&quot;2&quot;]);</span><br><span class="line">logAnything(233);</span><br><span class="line">logAnything(CGRectMake(1, 2, 3, 4));</span><br></pre></td></tr></table></figure></p><h1 id="objc-subclassing-restricted"><a href="#objc-subclassing-restricted" class="headerlink" title="objc_subclassing_restricted"></a>objc_subclassing_restricted</h1><p>使用这个属性可以定义一个不可被继承的类,只需在@interface前面加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((objc_subclassing_restricted))即可</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">__attribute__((objc_subclassing_restricted))</span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line">@interface Child: Person //Cannot subclass a class that was declared with the &apos;objc_subclassing_restricted&apos; attribute</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h1 id="objc-requires-super"><a href="#objc-requires-super" class="headerlink" title="objc_requires_super"></a>objc_requires_super</h1><p>NS_REQUIRES_SUPER 子类继承该方法时需要调用 super 否则给出编译警告<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">- (void)fatherMethod __attribute__((objc_requires_super));</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Child</span><br><span class="line">- (void)fatherMethod &#123;</span><br><span class="line"> //Method possibly missing a [super fatherMethod] call</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h1 id="objc-runtime-name"><a href="#objc-runtime-name" class="headerlink" title="objc_runtime_name"></a>objc_runtime_name</h1><p>用于 @interface 或 @protocol，将类或协议的名字在编译时指定成另一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((objc_runtime_name(&quot;SarkGay&quot;)))</span><br><span class="line">@interface Sark : NSObject</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@&quot;, NSStringFromClass([Sark class])); // &quot;SarkGay&quot;</span><br></pre></td></tr></table></figure></p><p>所有直接使用这个类名的地方都会被替换（唯一要注意的是这时用反射就不对了），最简单粗暴的用处就是去做个类名混淆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((objc_runtime_name(&quot;40ea43d7629d01e4b8d6289a132482d0dd5df4fa&quot;)))</span><br><span class="line">@interface SecretClass : NSObject</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>还能用数字开头，怕不怕 - -，假如写个脚本把每个类前加个随机生成的 objc_runtime_name，岂不是最最精简版的代码混淆就完成了呢…</p><p>它是我所了解的唯一一个对 objc 运行时类结构有影响的 attribute，通过编码类名可以在编译时注入一些信息，被带到运行时之后，再反解出来，这就相当于开设了一条秘密通道，打通了写码时和运行时。脑洞一下，假如把这个 attribute 定义成宏，以 annotation 的形式完成某些功能，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// @singleton 包裹了 __attribute__((objc_runtime_name(...)))</span><br><span class="line">// 将类名改名成 &quot;SINGLETON_Sark_sharedInstance&quot;</span><br><span class="line">@singleton(Sark, sharedInstance)</span><br><span class="line">@interface Sark : NSObject</span><br><span class="line">+ (instancetype)sharedInstance;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>在运行时用 <strong>attribute</strong>((constructor)) 获取入口时机，用 runtime 找到这个类，反解出 “sharedInstance” 这个 selector 信息，动态将 + alloc，- init 等方法替换，返回 + sharedInstance 单例。</p><h1 id="objc-boxable"><a href="#objc-boxable" class="headerlink" title="objc_boxable"></a>objc_boxable</h1><p>Objective-C 中的 @(…) 语法糖可以将基本数据类型 box 成 NSNumber 对象，假如想 box 一个 struct 类型或是 union 类型成 NSValue 对象，可以使用这个属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef struct __attribute__((objc_boxable)) &#123;</span><br><span class="line">CGFloat x, y, width, height;</span><br><span class="line">&#125; XXRect;</span><br></pre></td></tr></table></figure></p><p>这样一来，XXRect 就具备被 box 的能力：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CGRect rect1 = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">NSValue *value1 = @(rect1); // &lt;--- Compile Error</span><br><span class="line">XXRect rect2 = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">NSValue *value2 = @(rect2); // √</span><br></pre></td></tr></table></figure></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.sunnyxx.com/2016/05/14/clang-attributes/" target="_blank" rel="noopener">参考地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Clang-Attribute-说明&quot;&gt;&lt;a href=&quot;#Clang-Attribute-说明&quot; class=&quot;headerlink&quot; title=&quot;Clang Attribute 说明&quot;&gt;&lt;/a&gt;Clang Attribute 说明&lt;/h1&gt;&lt;p&gt;Clang 
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React入门</title>
    <link href="http://yoursite.com/2018/09/03/React%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/09/03/React入门/</id>
    <published>2018-09-03T02:50:42.000Z</published>
    <updated>2018-09-03T07:47:00.290Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>swift和OC返回指定页面</title>
    <link href="http://yoursite.com/2018/08/27/swift%E5%92%8COC%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2018/08/27/swift和OC返回指定页面/</id>
    <published>2018-08-27T08:09:05.000Z</published>
    <updated>2018-09-03T07:46:40.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VC-多层-push后回到指定页面的几种方法"><a href="#VC-多层-push后回到指定页面的几种方法" class="headerlink" title="VC 多层 push后回到指定页面的几种方法"></a>VC 多层 push后回到指定页面的几种方法</h1><p>写一个ViewController的类方法,核心方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func backToViewController(className: String, animated: Bool) &#123;  </span><br><span class="line">        if ((self.navigationController) != nil) &#123;  </span><br><span class="line">            let controllers: Array = (self.navigationController?.viewControllers) ?? []  </span><br><span class="line">            let res = controllers.filter &#123; (item) -&gt; Bool in  </span><br><span class="line">                guard let aClass = NSClassFromString(className) else &#123;  </span><br><span class="line">                return false  </span><br><span class="line">            &#125;  </span><br><span class="line">            return item.isKind(of: aClass)  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (res.count &gt; 0) &#123;  </span><br><span class="line">            self.navigationController?.popToViewController(res[0], animated: animated)  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/heliosneverend/popToViewController.git" target="_blank" rel="noopener">示例代码Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VC-多层-push后回到指定页面的几种方法&quot;&gt;&lt;a href=&quot;#VC-多层-push后回到指定页面的几种方法&quot; class=&quot;headerlink&quot; title=&quot;VC 多层 push后回到指定页面的几种方法&quot;&gt;&lt;/a&gt;VC 多层 push后回到指定页面的几种
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>记录苹果设备唯一账号</title>
    <link href="http://yoursite.com/2018/08/27/%E8%AE%B0%E5%BD%95%E8%8B%B9%E6%9E%9C%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E8%B4%A6%E5%8F%B7/"/>
    <id>http://yoursite.com/2018/08/27/记录苹果设备唯一账号/</id>
    <published>2018-08-27T03:28:21.000Z</published>
    <updated>2018-09-03T07:47:22.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS获取设备唯一标识符"><a href="#iOS获取设备唯一标识符" class="headerlink" title="iOS获取设备唯一标识符"></a>iOS获取设备唯一标识符</h1><h2 id="UDID-Unique-Device-Identifier"><a href="#UDID-Unique-Device-Identifier" class="headerlink" title="UDID(Unique Device Identifier)"></a>UDID(Unique Device Identifier)</h2><p>苹果IOS设备的唯一识别码, 越狱的设备通过某些工具可以改变设备的UDID,在iOS5.0(2011年8月份)开始，苹果宣布将不再支持uniqueIdentifier方法获取设备的UDID，iOS5以下是可以用的, 在 2013年3月21日苹果已经通知开发者,从2013年5月1日起，访问UIDIDs的程序将不再被审核通过替代的方案是开发者应该使用“在iOS 6中介绍的Vendor或Advertising标示符</p><hr><h2 id="UUID-Universally-Unique-Identifier"><a href="#UUID-Universally-Unique-Identifier" class="headerlink" title="UUID(Universally Unique Identifier)"></a>UUID(Universally Unique Identifier)</h2><p>唯一识别码<em>它是让分布式系统中的所有元素</em>都能有唯一的辨识资讯<em>而不需要透过中央控制端来做辨识资讯的指定</em>苹果公司建议使用UUID为应用生成唯一标识字符串](/uploads/a16006ef33534d3c6a28263d112ebed7/唯一识别码<em>它是让分布式系统中的所有元素</em>都能有唯一的辨识资讯<em>而不需要透过中央控制端来做辨识资讯的指定</em>苹果公司建议使用UUID为应用生成唯一标识字符串</p><hr><h2 id="MAC-Address-Medium-Access-Control"><a href="#MAC-Address-Medium-Access-Control" class="headerlink" title="MAC Address(Medium Access Control)"></a>MAC Address(Medium Access Control)</h2><p>媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置。在OSI模型中，第三层网络层负责 IP地址，第二层数据链路层则负责 MAC地址。因此一个主机会有一个MAC地址，而每个网络位置会有一个专属于它的IP地址。MAC地址是网卡决定的，是固定的</p><hr><h2 id="OPEN-UDID"><a href="#OPEN-UDID" class="headerlink" title="OPEN UDID"></a>OPEN UDID</h2><p>OpenUDID是通过第一个带有OpenUDID SDK包的App生成，如果你完全删除全部带有OpenUDID SDK包的App（比如恢复系统等），那么OpenUDID会重新生成，而且和之前的值会不同，相当于新设备； 优点是没有用到MAC地址；不同设备能够获取各自唯一的识别码，保证了唯一性，可以用于以往UDID的相关用途；从代码分析OpenUDID的获取，识别码获取方便并且保存谨慎。缺点是当将设备上所有使用了OpenUDID方案的应用程序删除，且设备关机重启，xcode彻底清除并重启，重装应用程序去获取OpenUDID，此时OpenUDID变化，与之前不一样了，所有OpenUDID应用卸载后，由UIPasteboard保存的数据即被清除，重装故会重新获取新的OpenUDID。 那么当因为用户干预或者恶意程序，致使UIPasteboard数据清除，从而导致OpenUDID被删除，重装也会获取新的OpenUDID。</p><hr><h2 id="广告标识符-IDFA-identifierForldentifier"><a href="#广告标识符-IDFA-identifierForldentifier" class="headerlink" title="广告标识符(IDFA-identifierForldentifier)"></a>广告标识符(IDFA-identifierForldentifier)</h2><p>是iOS 6中另外一个新的方法，提供了一个方法advertisingIdentifier，通过调用该方法会返回一个NSUUID实例，最后可以获得一个UUID，由系统存储着的。不过即使这是由系统存储的，但是有几种情况下，会重新生成广告标示符。如果用户完全重置系统（(设置程序 -&gt; 通用 -&gt; 还原 -&gt; 还原位置与隐私) ，这个广告标示符会重新生成。另外如果用户明确的还原广告(设置程序-&gt; 通用 -&gt; 关于本机 -&gt; 广告 -&gt; 还原广告标示符) ，那么广告标示符也会重新生成。关于广告标示符的还原，有一点需要注意：如果程序在后台运行，此时用户“还原广告标示符”，然后再回到程序中，此时获取广 告标示符并不会立即获得还原后的标示符。必须要终止程序，然后再重新启动程序，才能获得还原后的广告标示符。</p><hr><h2 id="Vendor标识符-IDFV-identifierForVendor"><a href="#Vendor标识符-IDFV-identifierForVendor" class="headerlink" title="Vendor标识符(IDFV-identifierForVendor)"></a>Vendor标识符(IDFV-identifierForVendor)</h2><p>Vendor是CFBundleIdentifier（反转DNS格式）的前两部分。来自同一个运营商的应用运行在同一个设备上，此属性的值是相同的；不同的运营商应用运行在同一个设备上值不同。 经测试，只要设备上有一个运营商的app，重新安装后的identifierForVendor值不变，如果该运营商的app全部删除，重新安装后的identifierForVendor值改变。</p><hr><h2 id="调研结果"><a href="#调研结果" class="headerlink" title="调研结果"></a>调研结果</h2><p>IMEI 苹果允许的API 但不能获取,不会变化,设备唯一。</p><hr><p>UDID 曾经可以获取,单现在也成为禁止调用的API,不会变化,设备唯一。</p><hr><p>MAC 不能直接通过设备API获取,某种脑洞可以通过WIFI下路由器反馈信息来回传MAC地址,很不方便不会变化,设备唯一</p><hr><p>IDFA 广告标示符,经常容易变,每当用户针对应用程序关闭再开启一次广告追踪就会发生变化</p><hr><p>IDFV 厂商标示符,不太容易变,每当用户卸载完应用厂家旗下所有的应用程序后,再次安装,会发生变化</p><hr><p>NSUUID 苹果API接口,每次获取都变化</p><hr><p>可以确认的是，在众多可选的标识方案里，都不能保证永远不变，所以必须配合钥匙扣使用，有了钥匙扣至少保证，只要用户不刷机，无论是升级系统，还是卸载光所有的应用程序，都不会发生变化,只要有了钥匙扣的辅助，可以说随便选一个标识，只要存入钥匙圈，都能保证不变了。推荐选择了目前来看更加稳定的IDFV</p><p><a href="https://github.com/heliosneverend/HeliosKeychain" target="_blank" rel="noopener">示例代码Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iOS获取设备唯一标识符&quot;&gt;&lt;a href=&quot;#iOS获取设备唯一标识符&quot; class=&quot;headerlink&quot; title=&quot;iOS获取设备唯一标识符&quot;&gt;&lt;/a&gt;iOS获取设备唯一标识符&lt;/h1&gt;&lt;h2 id=&quot;UDID-Unique-Device-Identi
      
    
    </summary>
    
      <category term="拾遗" scheme="http://yoursite.com/categories/%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="拾遗" scheme="http://yoursite.com/tags/%E6%8B%BE%E9%81%97/"/>
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="http://yoursite.com/2018/04/02/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/04/02/前端基础/</id>
    <published>2018-04-02T04:26:59.000Z</published>
    <updated>2018-09-03T09:39:34.590Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="http://yoursite.com/2018/02/27/Python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/02/27/Python基础/</id>
    <published>2018-02-27T00:11:25.000Z</published>
    <updated>2018-09-03T09:38:06.508Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Shell多终端间发送消息</title>
    <link href="http://yoursite.com/2017/08/31/Shell%E5%A4%9A%E7%BB%88%E7%AB%AF%E9%97%B4%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/"/>
    <id>http://yoursite.com/2017/08/31/Shell多终端间发送消息/</id>
    <published>2017-08-31T05:32:23.000Z</published>
    <updated>2018-09-03T10:43:27.852Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用who命令查看当前有几个终端启动"><a href="#使用who命令查看当前有几个终端启动" class="headerlink" title="使用who命令查看当前有几个终端启动"></a>使用who命令查看当前有几个终端启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//参数1：用户名 参数2：用户所在终端 参数3：用户登录时间</span><br><span class="line">bogon:~ YZY$ who</span><br><span class="line">YZY      console  Jul 21 23:13 </span><br><span class="line">YZY      ttys004  Jul 23 14:07</span><br></pre></td></tr></table></figure><h3 id="启动发送消息功能"><a href="#启动发送消息功能" class="headerlink" title="启动发送消息功能"></a>启动发送消息功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bogon:~ YZY$ mesg</span><br></pre></td></tr></table></figure><p>输出is y表示启动了发送消息功能，否则表示没有开启。</p><h3 id="使用who命令查看当前有几个终端启动-1"><a href="#使用who命令查看当前有几个终端启动-1" class="headerlink" title="使用who命令查看当前有几个终端启动"></a>使用who命令查看当前有几个终端启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bogon:~ YZY$ who -T</span><br></pre></td></tr></table></figure><p>-表示没有启动发送消息功能，+表示开通了</p><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息:"></a>发送消息:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write YZY ttys004</span><br></pre></td></tr></table></figure><h3 id="开启消息功能"><a href="#开启消息功能" class="headerlink" title="开启消息功能"></a>开启消息功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mseg y</span><br></pre></td></tr></table></figure><h3 id="退出发送消息"><a href="#退出发送消息" class="headerlink" title="退出发送消息"></a>退出发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crtl c</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用who命令查看当前有几个终端启动&quot;&gt;&lt;a href=&quot;#使用who命令查看当前有几个终端启动&quot; class=&quot;headerlink&quot; title=&quot;使用who命令查看当前有几个终端启动&quot;&gt;&lt;/a&gt;使用who命令查看当前有几个终端启动&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell中的数据库操作</title>
    <link href="http://yoursite.com/2017/08/26/Shell%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/08/26/Shell中的数据库操作/</id>
    <published>2017-08-26T02:32:23.000Z</published>
    <updated>2018-09-03T10:41:36.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#脚本中书写：</span><br><span class="line">MYSQL=$(which mysql)</span><br><span class="line">$MYSQL -u root -p</span><br></pre></td></tr></table></figure><h3 id="退出数据库"><a href="#退出数据库" class="headerlink" title="退出数据库"></a>退出数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#登录数据库：</span><br><span class="line">MYSQL=$(which mysql)</span><br><span class="line">#$MYSQL -u root -p 表示登录数据库，后面[-e &apos;exit&apos;]命令表示登录后立即执行退出指令</span><br><span class="line">$MYSQL -u root -p -e &apos;exit&apos;</span><br></pre></td></tr></table></figure><h3 id="显示数据库列表"><a href="#显示数据库列表" class="headerlink" title="显示数据库列表"></a>显示数据库列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MYSQL=$(which mysql)</span><br><span class="line">$MYSQL -u root -p -e &apos;show databases&apos;</span><br></pre></td></tr></table></figure><h3 id="查询数据库表"><a href="#查询数据库表" class="headerlink" title="查询数据库表"></a>查询数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYSQL=$(which mysql)</span><br><span class="line">$MYSQL db_123 -u root -p -e &apos;select * from t_student&apos;</span><br><span class="line">#格式 $MYSQL 数据库名  -u root -p -e 查询命令</span><br></pre></td></tr></table></figure><h3 id="查询数据库表-amp-输入重定向"><a href="#查询数据库表-amp-输入重定向" class="headerlink" title="查询数据库表&amp;输入重定向"></a>查询数据库表&amp;输入重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MYSQL=$(which mysql)</span><br><span class="line">$MYSQL db_123 -u root -p &lt;&lt; MARK</span><br><span class="line">select * from t_student</span><br><span class="line">MARK</span><br><span class="line"></span><br><span class="line"># 开始标记和结束标记语法：&lt;T&gt; 代码 &lt;T&gt;</span><br></pre></td></tr></table></figure><h3 id="插入表数据"><a href="#插入表数据" class="headerlink" title="插入表数据"></a>插入表数据</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$MYSQL db_123 -u root -p &lt;&lt;MARK</span><br><span class="line">insert into t_student values(3,&quot;Mike&quot;,1)</span><br><span class="line">MARK</span><br></pre></td></tr></table></figure><h4 id="案例二-动态传递参数，并且返回执行状态"><a href="#案例二-动态传递参数，并且返回执行状态" class="headerlink" title="案例二 动态传递参数，并且返回执行状态"></a>案例二 动态传递参数，并且返回执行状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MYSQL=$&#123;which mysql&#125;</span><br><span class="line">#若不等于某个长度</span><br><span class="line">if [$# -ne 3]</span><br><span class="line">then</span><br><span class="line">echo &quot;传递的参数不对&quot;</span><br><span class="line">else </span><br><span class="line">#插入数据</span><br><span class="line">$MYQSL db_123 -u root -p &lt;&lt; MARK</span><br><span class="line">insert into t_student values(4,&apos;Grap&apos;,1)</span><br><span class="line">MARK</span><br><span class="line">#执行状态</span><br><span class="line">if []</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;打开数据库&quot;&gt;&lt;a href=&quot;#打开数据库&quot; class=&quot;headerlink&quot; title=&quot;打开数据库&quot;&gt;&lt;/a&gt;打开数据库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell重定向</title>
    <link href="http://yoursite.com/2017/08/25/Shell%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://yoursite.com/2017/08/25/Shell重定向/</id>
    <published>2017-08-25T10:32:23.000Z</published>
    <updated>2018-09-03T10:35:42.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shell中将输入、输出和错误用三种描述符表示："><a href="#shell中将输入、输出和错误用三种描述符表示：" class="headerlink" title="shell中将输入、输出和错误用三种描述符表示："></a>shell中将输入、输出和错误用三种描述符表示：</h3><p>标准输入STDIN，用0表示，接受键盘输入<br>使用cat命令接受键盘输入<br>非标准输入-文件输入，即使用cat读取文件<br>标准输出STDOUT，对应终端显示，1表示<br>标准错误STDERR，2表示</p><h3 id="Demo1：重定向输出到文件中"><a href="#Demo1：重定向输出到文件中" class="headerlink" title="Demo1：重定向输出到文件中"></a>Demo1：重定向输出到文件中</h3><p>ls -l显示文件的信息</p><blockquote><blockquote><p>追加内容<br>替换内容<br>who命令打印当前登录的系统用户信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls -l hello.sh</span><br><span class="line">cat hello.sh</span><br><span class="line">#追加内容</span><br><span class="line">who&gt;&gt;hello.sh</span><br><span class="line">cat hello.sh</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h3 id="Demo2：重定向错误信息输出到文件中"><a href="#Demo2：重定向错误信息输出到文件中" class="headerlink" title="Demo2：重定向错误信息输出到文件中"></a>Demo2：重定向错误信息输出到文件中</h3><p>-al查找文件<br>❌错误做法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al hello.sh &gt; aim.sh</span><br></pre></td></tr></table></figure></p><p>上面执行后，如果没有aim.sh文件，则会自动创建aim.sh文件，但是最终都不会将错误信息输出到目标文件aim.sh中<br>所以如果我们需要保存错误信息，就需要采用STDERR实现<br>✅正确做法：<br>将STDERR文件描述修改为2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al a.sh 2&gt;hello.sh</span><br></pre></td></tr></table></figure></p><h3 id="Demo3：同时保存错误和数据到不同文件"><a href="#Demo3：同时保存错误和数据到不同文件" class="headerlink" title="Demo3：同时保存错误和数据到不同文件"></a>Demo3：同时保存错误和数据到不同文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将错误数据重定向到error.sh文件中,将查找结果保存到hello.sh文件中</span><br><span class="line">ls -al a.sh b.sh c.sh 2&gt;error.sh &gt;hello.sh</span><br></pre></td></tr></table></figure><h3 id="Demo4：同时保存错误和数据到同一个文件"><a href="#Demo4：同时保存错误和数据到同一个文件" class="headerlink" title="Demo4：同时保存错误和数据到同一个文件"></a>Demo4：同时保存错误和数据到同一个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -a file.sh &amp;&gt;result.sh</span><br><span class="line">#查看文件内容</span><br><span class="line">cat result.sh</span><br></pre></td></tr></table></figure><h2 id="临时重定向输出"><a href="#临时重定向输出" class="headerlink" title="临时重定向输出:"></a>临时重定向输出:</h2><p>&amp;命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将输出信息作为错位日志</span><br><span class="line">echo &quot;haha&quot; &gt;&amp; 2</span><br></pre></td></tr></table></figure></p><p>执行：将STDERR信息重定向到error.sh文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.sh 2&gt;error.sh</span><br></pre></td></tr></table></figure></p><h2 id="永久重定向输出"><a href="#永久重定向输出" class="headerlink" title="永久重定向输出"></a>永久重定向输出</h2><p>exec命令<br>保存数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#在文件内部</span><br><span class="line">exec 1 &gt; new.sh</span><br><span class="line">echo &quot;haha&quot;</span><br></pre></td></tr></table></figure></p><h2 id="重定向输入"><a href="#重定向输入" class="headerlink" title="重定向输入:"></a>重定向输入:</h2><p>命令符&lt;<br>一旦设置了输入重定向指令，则read指令会自动连接输入的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#从hello.sh文件中读取数据</span><br><span class="line">exec 0&lt; hello.sh</span><br><span class="line">count=0</span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">echo &quot;当前行的内容数据是：$line，当前行数：$count&quot;</span><br><span class="line">count=$[$count + 1]</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="自定义重定向输出"><a href="#自定义重定向输出" class="headerlink" title="自定义重定向输出:"></a>自定义重定向输出:</h2><p>使用exec命令<br>🎈下面这种方式，会替换掉要定向文件里面的所有内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec 3&gt; hello.sh</span><br><span class="line">#临时重定向，标记文件</span><br><span class="line">echo &quot;haha&quot; &gt;&amp;3</span><br></pre></td></tr></table></figure></p><p>🎈如果在要定向的文件中追加内容，而不是替换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec 3 &gt;&gt; hello.sh</span><br><span class="line">#临时重定向，标记文件</span><br><span class="line">echo &quot;haha&quot; &gt;&amp;3</span><br></pre></td></tr></table></figure></p><h2 id="重定向输出恢复"><a href="#重定向输出恢复" class="headerlink" title="重定向输出恢复"></a>重定向输出恢复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#将3重定向为1</span><br><span class="line">exec 3 &gt;&amp; 1</span><br><span class="line">exec 1&gt; hello.sh</span><br><span class="line">echo &quot;haha&quot;</span><br><span class="line">#将1恢复到3</span><br><span class="line">exec 1 &gt;&amp; 3</span><br><span class="line">echo &quot;xixi&quot;</span><br></pre></td></tr></table></figure><h2 id="创建读写文件描述符"><a href="#创建读写文件描述符" class="headerlink" title="创建读写文件描述符"></a>创建读写文件描述符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exec 3&lt;&gt;hello.sh</span><br><span class="line">#从hello文件中读取内容</span><br><span class="line">read line &gt;&amp;3</span><br><span class="line">echo &quot;$line&quot;</span><br><span class="line">#写入内容</span><br><span class="line">echo &quot;hah&quot; &gt;&amp; 3</span><br><span class="line">#注意：此写入会替换掉从第二行开始的所有内容</span><br><span class="line">#因为上面读取完第一行后，此时文件指针指向到了第二行</span><br></pre></td></tr></table></figure><h2 id="关闭读写文件描述符"><a href="#关闭读写文件描述符" class="headerlink" title="关闭读写文件描述符"></a>关闭读写文件描述符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec 3 &gt;&amp;-</span><br></pre></td></tr></table></figure><h2 id="阻止命令输出"><a href="#阻止命令输出" class="headerlink" title="阻止命令输出:"></a>阻止命令输出:</h2><p>输出到系统一个临时文件中，但是此临时文件不会保存内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al &gt; /dev/null</span><br></pre></td></tr></table></figure></p><p>使用阻止输出来清空文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/null &gt; hello.sh</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shell中将输入、输出和错误用三种描述符表示：&quot;&gt;&lt;a href=&quot;#shell中将输入、输出和错误用三种描述符表示：&quot; class=&quot;headerlink&quot; title=&quot;shell中将输入、输出和错误用三种描述符表示：&quot;&gt;&lt;/a&gt;shell中将输入、输出和错
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库操作</title>
    <link href="http://yoursite.com/2017/08/23/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/08/23/mysql数据库操作/</id>
    <published>2017-08-23T02:12:23.000Z</published>
    <updated>2018-09-03T10:38:41.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL操作命令："><a href="#MySQL操作命令：" class="headerlink" title="MySQL操作命令："></a>MySQL操作命令：</h2><h3 id="连接-登录-数据库："><a href="#连接-登录-数据库：" class="headerlink" title="连接(登录)数据库："></a>连接(登录)数据库：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">//然后输入密码</span><br></pre></td></tr></table></figure><h3 id="退出数据库："><a href="#退出数据库：" class="headerlink" title="退出数据库："></a>退出数据库：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure><h3 id="显示所有的数据库"><a href="#显示所有的数据库" class="headerlink" title="显示所有的数据库"></a>显示所有的数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases</span><br></pre></td></tr></table></figure><h3 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h3><p>mysql&gt; use 库名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`mysql&gt; use db_test`</span><br></pre></td></tr></table></figure></p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database 库名</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database 库名</span><br></pre></td></tr></table></figure><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table 表名</span><br><span class="line">mysql&gt; create table t_studentList(s_id int(4) not null primary key,s_name char(20),sex int(4) not null default &apos;0&apos;)</span><br><span class="line">创建一个学生表</span><br><span class="line">//s_id是int类型，四个字符长度，不可为空，</span><br><span class="line">//s_name是char类型，20个字符长度</span><br><span class="line">//sex是int类型4个长度，不可为空,默认是0</span><br></pre></td></tr></table></figure><h3 id="显示数据库表"><a href="#显示数据库表" class="headerlink" title="显示数据库表"></a>显示数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables</span><br></pre></td></tr></table></figure><h3 id="插入表数据"><a href="#插入表数据" class="headerlink" title="插入表数据"></a>插入表数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在t_student表中</span><br><span class="line">mysql&gt; insert into t_student values(0,&quot;Bill&quot;,0)</span><br></pre></td></tr></table></figure><h3 id="查询表数据"><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_student</span><br></pre></td></tr></table></figure><h3 id="按条件查询"><a href="#按条件查询" class="headerlink" title="按条件查询"></a>按条件查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_student where s_id = 2</span><br></pre></td></tr></table></figure><h3 id="更新表数据"><a href="#更新表数据" class="headerlink" title="更新表数据"></a>更新表数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update t_student set s_sex=1 where s_name=&apos;Bill&apos;</span><br></pre></td></tr></table></figure><h3 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from t_student where s_name = &quot;Bill&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL操作命令：&quot;&gt;&lt;a href=&quot;#MySQL操作命令：&quot; class=&quot;headerlink&quot; title=&quot;MySQL操作命令：&quot;&gt;&lt;/a&gt;MySQL操作命令：&lt;/h2&gt;&lt;h3 id=&quot;连接-登录-数据库：&quot;&gt;&lt;a href=&quot;#连接-登录-数据库：&quot;
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell函数和管道以及bash计算器</title>
    <link href="http://yoursite.com/2017/08/21/Shell%E5%87%BD%E6%95%B0%E5%92%8C%E7%AE%A1%E9%81%93%E4%BB%A5%E5%8F%8Abash%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://yoursite.com/2017/08/21/Shell函数和管道以及bash计算器/</id>
    <published>2017-08-21T01:12:23.000Z</published>
    <updated>2018-09-03T10:29:51.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>使用function关键字来定义函数<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>带参数的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add()&#123;</span><br><span class="line">    echo &quot;第一个参数 文件名字：$0&quot;</span><br><span class="line">    echo &quot;第二个参数: $1&quot;</span><br><span class="line">    echo &quot;第三个参数: $2&quot;</span><br><span class="line">    return &quot;haha&quot;</span><br><span class="line">&#125;</span><br><span class="line">#调用方法,传参</span><br><span class="line">add $0 100</span><br></pre></td></tr></table></figure></p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>一个命令的输出作为下一个命令的输入，此时需要用到管道<br>语法结构：command1 | command2</p><h2 id="bash计算器"><a href="#bash计算器" class="headerlink" title="bash计算器"></a>bash计算器</h2><p>⚠️bash计算器，实际是一种编程语言，它允许使用命令行输入浮点数及表达式，然后解释并执行表达式，并返回结果。<br>⚠️在shell脚步语言中使用命令bc，可以打开并访问bash计算器<br>⚠️退出计算器：输入quit命令并回车</p><p>将bash计算器应用到shell中：<br>语法结构：val=$(echo “options;expression” | bc)<br>解释：options表示选项，expression表示表达式</p><h3 id="应用1"><a href="#应用1" class="headerlink" title="应用1"></a>应用1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val=$(echo &quot;1.56 * 100&quot; | bc)</span><br><span class="line">echo $val</span><br><span class="line">#结果是156.00</span><br></pre></td></tr></table></figure><h3 id="应用2"><a href="#应用2" class="headerlink" title="应用2"></a>应用2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#FLAG为开始、结束标记，可以使用任意字符</span><br><span class="line">val=$(bc&lt;&lt;FLAG</span><br><span class="line">options</span><br><span class="line">expression</span><br><span class="line">FLAG</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val=$(bc&lt;&lt;A</span><br><span class="line">a=($val1 * $val2)</span><br><span class="line">b=($a - 10)</span><br><span class="line">A</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;使用function关键字来定义函数&lt;br&gt;语法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell文件操作相关</title>
    <link href="http://yoursite.com/2017/08/20/Shell%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/08/20/Shell文件操作相关/</id>
    <published>2017-08-20T04:01:23.000Z</published>
    <updated>2018-09-03T10:27:18.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>文件a： a.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!#/bin/bash</span><br><span class="line">echo &quot;a&quot;</span><br></pre></td></tr></table></figure></p><p>文件b： b.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!#/bin/bash</span><br><span class="line">./a.sh</span><br><span class="line">echo &quot;b</span><br></pre></td></tr></table></figure></p><p>此时文件b包含了文件a，执行b文件，就会把文件a和文件b的内容都执行</p><h3 id="方式二-使用关键字source"><a href="#方式二-使用关键字source" class="headerlink" title="方式二 使用关键字source"></a>方式二 使用关键字source</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!#/bin/bash</span><br><span class="line">source ./a.sh</span><br><span class="line">echo &quot;b</span><br></pre></td></tr></table></figure><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>作用：<br>查看文件内容<br>连接文件<br>创建一个或多个文件<br>重定向输出到终端<br>重定向到文件<br>查看文件内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat hello.sh</span><br></pre></td></tr></table></figure></p><p>显示文件内容和行号:<br>使用-n<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n hello.sh</span><br></pre></td></tr></table></figure></p><p>显示文件内容和行号,只标记空白行:<br>使用-b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b a.sh</span><br></pre></td></tr></table></figure></p><p>⚠️多行内容转为单行：<br>使用-e，会在每一行内容的最后加入$符号</p><p>⚠️接受标准输入，输出标准输出：<br>输入后使用回车键<br>使用ctrl+c退出</p><h2 id="读取输入内容"><a href="#读取输入内容" class="headerlink" title="读取输入内容"></a>读取输入内容</h2><p>使用关键字read<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;请输入名字&quot;</span><br><span class="line">read name</span><br><span class="line">echo &quot;您输入的名字是:$name&quot;</span><br></pre></td></tr></table></figure></p><p>另一种写法: 使用-p<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入您的名字&quot; name</span><br><span class="line">echo &quot;您输入的名字是:$name&quot;</span><br></pre></td></tr></table></figure></p><p>带有超时读取：使用-t<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if read -t 6 -p &quot;请输入您的名字:&quot; name</span><br><span class="line">then </span><br><span class="line">echo &quot;您输入的名字是:$name&quot;</span><br><span class="line">else </span><br><span class="line">echo &quot;超时&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>隐藏输入内容，密码，使用-s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if read -s -p &quot;请输入您的密码:&quot; pwd</span><br></pre></td></tr></table></figure></p><p>从文件中按行读取内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat file.sh | while read line</span><br><span class="line">do </span><br><span class="line">echo &quot;每一行的内容是：$&#123;line&#125;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="printf命令详解"><a href="#printf命令详解" class="headerlink" title="printf命令详解"></a>printf命令详解</h2><p>printf区别于echo命令，不会换行，一般用于格式化打印输出<br>语法：printf fomat -string 参数列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#打印表头</span><br><span class="line">printf &quot;%-10s %-8s %-4s \n&quot; 姓名 性别 体重kg</span><br><span class="line">#打印内容</span><br><span class="line">printf &quot;%-10s %-8s %-4s \n&quot; Mike 女 62kg</span><br><span class="line">printf &quot;%-10s %-8s %-4s \n&quot; Bill 男 50kg</span><br></pre></td></tr></table></figure></p><p>解释：%-10s表示宽度为10个字符的距离,-表示左对齐</p><h2 id="创建临时文件"><a href="#创建临时文件" class="headerlink" title="创建临时文件"></a>创建临时文件</h2><p>使用命令符mktemp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mktemp hello.sh</span><br><span class="line">#创建一个以haha为前缀，以随机6位字母为结尾文件名的文件</span><br><span class="line">mktemp haha.XXXXXX</span><br></pre></td></tr></table></figure></p><p>在脚本中创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建临时文件</span><br><span class="line">tempfile=$(mktemp newfile.XXXXXX)</span><br><span class="line">#重定向临时文件</span><br><span class="line">exec 3&gt; $tempfile</span><br><span class="line">echo &quot;$tempfile&quot;</span><br><span class="line">#输出内容到重定向的文件中</span><br><span class="line">echo &quot;哈哈&quot; &gt;&amp;3</span><br><span class="line">#关闭重定向</span><br><span class="line">exec 3&gt;&amp;-</span><br><span class="line">#打印文件内容</span><br><span class="line">cat $tempfile</span><br><span class="line">#删除文件</span><br><span class="line">rm -f $tempfile 2&gt; /dev/null</span><br></pre></td></tr></table></figure></p><h2 id="在系统临时目录创建临时文件"><a href="#在系统临时目录创建临时文件" class="headerlink" title="在系统临时目录创建临时文件"></a>在系统临时目录创建临时文件</h2><p>使用命令符-t创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mktemp -t newfile.XXXXXX</span><br></pre></td></tr></table></figure></p><h2 id="创建临时目录"><a href="#创建临时目录" class="headerlink" title="创建临时目录"></a>创建临时目录</h2><p>使用命令符-d创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tempfile=$(mktemp -d newfile.XXXXXX)</span><br><span class="line">#进入临时目录</span><br><span class="line">cd $tempfile</span><br><span class="line">$在临时目录创建临时文件</span><br><span class="line">tempfile1=$(mktemp newfile.XXXXXX)</span><br><span class="line">#自定义文件描述符 重定向输出</span><br><span class="line">exec 7 &gt; $tempfile1</span><br><span class="line">exec &quot;哈哈&quot; &gt;&amp; 7</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h2&gt;&lt;h3 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell运算符</title>
    <link href="http://yoursite.com/2017/08/17/Shell%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2017/08/17/Shell运算符/</id>
    <published>2017-08-17T08:12:25.000Z</published>
    <updated>2018-09-03T10:16:37.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p><img src="关系运算符1.png" alt=""></p><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p><img src="关系运算符2.png" alt=""></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="关系运算符3.png" alt=""></p><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p><img src="关系运算符4.png" alt=""></p><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p><img src="关系运算符5.png" alt=""></p><h2 id="expr命令"><a href="#expr命令" class="headerlink" title=".expr命令"></a>.expr命令</h2><p><img src="关系运算符6.png" alt=""></p><h2 id="加法运算符"><a href="#加法运算符" class="headerlink" title="加法运算符"></a>加法运算符</h2><h3 id="使用使用expr外部样式（通用方式）"><a href="#使用使用expr外部样式（通用方式）" class="headerlink" title="使用使用expr外部样式（通用方式）"></a>使用使用expr外部样式（通用方式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1000</span><br><span class="line">b=3000</span><br><span class="line">r=`expr $a + $b`</span><br><span class="line">echo $r</span><br></pre></td></tr></table></figure><h3 id="使用-a-b"><a href="#使用-a-b" class="headerlink" title="使用 $(($a + $b))"></a>使用 $(($a + $b))</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1000</span><br><span class="line">b=3000</span><br><span class="line">r=$(($a + $b))</span><br><span class="line">echo $r $d</span><br></pre></td></tr></table></figure><h3 id="使用-a-b-1"><a href="#使用-a-b-1" class="headerlink" title="使用$[$a + $b]"></a>使用$[$a + $b]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1000</span><br><span class="line">b=3000</span><br><span class="line">r=$[$a + $b]</span><br><span class="line">echo $r $d</span><br></pre></td></tr></table></figure><h3 id="使用let"><a href="#使用let" class="headerlink" title="使用let"></a>使用let</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1000</span><br><span class="line">b=3000</span><br><span class="line">let r=($a + $b)</span><br><span class="line">echo $r</span><br></pre></td></tr></table></figure><h2 id="减法运算符"><a href="#减法运算符" class="headerlink" title="减法运算符"></a>减法运算符</h2><p>同上</p><h2 id="乘法运算符"><a href="#乘法运算符" class="headerlink" title="乘法运算符"></a>乘法运算符</h2><h3 id="expr配合转义符"><a href="#expr配合转义符" class="headerlink" title="expr配合转义符"></a>expr配合转义符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=`expr 4 \* 5`</span><br></pre></td></tr></table></figure><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r=$(( 4 * 5 ))</span><br><span class="line">r=$[ 4 * 5 ]</span><br><span class="line">let m=n*10</span><br></pre></td></tr></table></figure><h2 id="除法运算符"><a href="#除法运算符" class="headerlink" title="除法运算符"></a>除法运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r=`expr 40 / 5` </span><br><span class="line">r=$(( 40 / 5 ))</span><br><span class="line">r=$[ 40 / 5 ]</span><br><span class="line">let r=m/10</span><br></pre></td></tr></table></figure><h2 id="取余运算符"><a href="#取余运算符" class="headerlink" title="%取余运算符"></a>%取余运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&apos;expr $a % $b&apos;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="=赋值运算符"></a>=赋值运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=10</span><br></pre></td></tr></table></figure><h2 id="恒等运算符"><a href="#恒等运算符" class="headerlink" title="==恒等运算符"></a>==恒等运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=0</span><br><span class="line">b=1</span><br><span class="line">if [$a == $b]</span><br><span class="line">then</span><br><span class="line">echo 1</span><br><span class="line">else</span><br><span class="line">echo 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="布尔运算符-1"><a href="#布尔运算符-1" class="headerlink" title="布尔运算符"></a>布尔运算符</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关系运算符&quot;&gt;&lt;a href=&quot;#关系运算符&quot; class=&quot;headerlink&quot; title=&quot;关系运算符&quot;&gt;&lt;/a&gt;关系运算符&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;关系运算符1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;布尔运算符&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell数组</title>
    <link href="http://yoursite.com/2017/08/17/Shell%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/08/17/Shell数组/</id>
    <published>2017-08-17T02:35:25.000Z</published>
    <updated>2018-09-03T10:09:28.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="声明一个数组"><a href="#声明一个数组" class="headerlink" title="声明一个数组"></a>声明一个数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameArray=(&quot;Mike&quot; &quot;Bill&quot; &quot;John&quot;)</span><br></pre></td></tr></table></figure><h3 id="给数组增加值或者替换值"><a href="#给数组增加值或者替换值" class="headerlink" title="给数组增加值或者替换值"></a>给数组增加值或者替换值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameArray[3]=&quot;Gil&quot;</span><br></pre></td></tr></table></figure><h3 id="默认只输出数组第一个值"><a href="#默认只输出数组第一个值" class="headerlink" title="默认只输出数组第一个值"></a>默认只输出数组第一个值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $nameArray</span><br></pre></td></tr></table></figure><h3 id="输出下标指定的值"><a href="#输出下标指定的值" class="headerlink" title="输出下标指定的值"></a>输出下标指定的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;nameArray[1]&#125; $&#123;nameArray[3]&#125;</span><br></pre></td></tr></table></figure><h3 id="输出数组内所有值-–-gt-结果为多个字符串"><a href="#输出数组内所有值-–-gt-结果为多个字符串" class="headerlink" title="输出数组内所有值 –&gt; 结果为多个字符串"></a>输出数组内所有值 –&gt; 结果为多个字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;nameArray[@]&#125;</span><br></pre></td></tr></table></figure><h3 id="输出数组内所有值-–-gt-结果为一个字符串"><a href="#输出数组内所有值-–-gt-结果为一个字符串" class="headerlink" title="输出数组内所有值 –&gt; 结果为一个字符串"></a>输出数组内所有值 –&gt; 结果为一个字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;nameArray[*]&#125;</span><br></pre></td></tr></table></figure><h3 id="获取数组元素个数"><a href="#获取数组元素个数" class="headerlink" title="获取数组元素个数"></a>获取数组元素个数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：$&#123;#数组名[@]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;#nameArray&#125; ----- 输出数组第一个元素长度</span><br><span class="line">echo $&#123;#nameArray[10]&#125; ----- 输出数组第10个元素长度</span><br><span class="line">echo $&#123;#nameArray[@]&#125; ---- 输出数组整体元素个数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;声明一个数组&quot;&gt;&lt;a href=&quot;#声明一个数组&quot; class=&quot;headerlink&quot; title=&quot;声明一个数组&quot;&gt;&lt;/a&gt;声明一个数组&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>echo命令</title>
    <link href="http://yoursite.com/2017/08/16/echo%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/08/16/echo命令/</id>
    <published>2017-08-16T07:25:25.000Z</published>
    <updated>2018-09-03T10:07:45.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输出字符串-默认-带有换行"><a href="#输出字符串-默认-带有换行" class="headerlink" title="输出字符串 默认 带有换行:"></a>输出字符串 默认 带有换行:</h3><p><strong>echo “字符串 哈哈”</strong><br>输出字符串 不换行 -e表示开启转义功能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;不换行1\c&quot;</span><br><span class="line">echo -e &quot;不换行2&quot;</span><br></pre></td></tr></table></figure></p><h3 id="字符串内部换行"><a href="#字符串内部换行" class="headerlink" title="字符串内部换行:"></a>字符串内部换行:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;开启了转义的字符串\n哈哈&quot;</span><br></pre></td></tr></table></figure><h3 id="输出转义字符串"><a href="#输出转义字符串" class="headerlink" title="输出转义字符串:"></a>输出转义字符串:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot; &quot;这是一个转义字符&quot; &quot;</span><br></pre></td></tr></table></figure><h3 id="包含变量"><a href="#包含变量" class="headerlink" title="包含变量:"></a>包含变量:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;Mike&quot;</span><br><span class="line">echo &quot;$&#123;name&#125;是个人&quot;</span><br></pre></td></tr></table></figure><h3 id="显示一个命令"><a href="#显示一个命令" class="headerlink" title="显示一个命令:"></a>显示一个命令:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">echo $&#123;time&#125;</span><br></pre></td></tr></table></figure><h3 id="exit指令，执行后，后面的代码不执行了，退出程序"><a href="#exit指令，执行后，后面的代码不执行了，退出程序" class="headerlink" title="exit指令，执行后，后面的代码不执行了，退出程序:"></a>exit指令，执行后，后面的代码不执行了，退出程序:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;haha&quot;</span><br><span class="line">exit</span><br><span class="line">echo &quot;这条不执行了&quot;</span><br></pre></td></tr></table></figure><h4 id="exit-二"><a href="#exit-二" class="headerlink" title="exit 二"></a>exit 二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;haha&quot;</span><br><span class="line">exit 1</span><br><span class="line">echo &quot;这条不执行了&quot;</span><br></pre></td></tr></table></figure><h3 id="命令状态"><a href="#命令状态" class="headerlink" title="命令状态"></a>命令状态</h3><p><img src="echo状态码.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;输出字符串-默认-带有换行&quot;&gt;&lt;a href=&quot;#输出字符串-默认-带有换行&quot; class=&quot;headerlink&quot; title=&quot;输出字符串 默认 带有换行:&quot;&gt;&lt;/a&gt;输出字符串 默认 带有换行:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;echo “字符串 哈哈”&lt;/s
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell中的字符串操作</title>
    <link href="http://yoursite.com/2017/08/16/Shell%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/08/16/Shell中的字符串操作/</id>
    <published>2017-08-16T00:15:25.000Z</published>
    <updated>2018-09-03T10:04:09.533Z</updated>
    
    <content type="html"><![CDATA[<p>shell中字符串使用单、双引号均可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=&apos;andy&apos;</span><br><span class="line">id=&quot;haha&quot;</span><br><span class="line">echo $name</span><br><span class="line">echo $id</span><br></pre></td></tr></table></figure></p><h2 id="字符串拼接："><a href="#字符串拼接：" class="headerlink" title="字符串拼接："></a>字符串拼接：</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">name=&apos;andy&apos;</span><br><span class="line">id=&quot;haha&quot;</span><br><span class="line">#可以缩写为total=&quot;$name$id&quot;</span><br><span class="line">total=&quot;$&#123;name&#125;$&#123;id&#125;&quot;</span><br><span class="line">echo $total</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">name=&apos;andy&apos;</span><br><span class="line">id=&quot;haha&quot;</span><br><span class="line">total=&quot; 姓名：$name 身份证： $id&quot;</span><br><span class="line">echo $total</span><br></pre></td></tr></table></figure><h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法:$&#123;#变量名&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">name=&apos;andy&apos;</span><br><span class="line">echo $&#123;#name&#125;</span><br><span class="line">#输出结果是4</span><br></pre></td></tr></table></figure><h2 id="字符串提取子串"><a href="#字符串提取子串" class="headerlink" title="字符串提取子串"></a>字符串提取子串</h2><h3 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法$&#123;string:position&#125;</span><br></pre></td></tr></table></figure><p>在$string中，从$position位置之后开始提取子串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;abcABC123ABCabcde&quot;</span><br><span class="line">subname=$&#123;name:3&#125;</span><br><span class="line">echo $&#123;subname&#125;</span><br><span class="line">#输出结果ABC123ABCabcde</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法$&#123;string:position:length&#125;</span><br></pre></td></tr></table></figure><p>在$string中，从$position位置之后开始提取$length长度的子串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;NAME:3:6&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字符串删除"><a href="#字符串删除" class="headerlink" title="字符串删除"></a>字符串删除</h2><h3 id="从左到右删除"><a href="#从左到右删除" class="headerlink" title="从左到右删除"></a>从左到右删除</h3><h4 id="方式一-2"><a href="#方式一-2" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;string#substring正则表达式&#125;</span><br></pre></td></tr></table></figure><p>从变量$string开头开始删除最短匹配$substring子串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;abcABC123ABCabcde&quot;</span><br><span class="line">subname=$&#123;name#a*c&#125;</span><br><span class="line">echo $&#123;subname&#125;</span><br></pre></td></tr></table></figure></p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;string##substring正则表达式&#125;</span><br></pre></td></tr></table></figure><p>从变量$string开头开始删除最长匹配$sunstring子串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;abcABC123ABCabcde&quot;</span><br><span class="line">subname=$&#123;name##a*c&#125;</span><br><span class="line">echo $&#123;subname&#125;</span><br></pre></td></tr></table></figure></p><h3 id="从右到左删除"><a href="#从右到左删除" class="headerlink" title="从右到左删除"></a>从右到左删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;string%substring&#125;</span><br></pre></td></tr></table></figure><p>从变量$string结尾开始删除最短匹配$substring子串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;string%%substring&#125;</span><br></pre></td></tr></table></figure><p>从变量$string结尾开始删除最长匹配$substring子串<br>注意:<br>在进行#或##匹配时，string的首字符必须是被删除子串substring的第一个字符，不然无法匹配删除；<br>在进行%或者%%匹配时，string的最后一个字符必须是被删除子串substring的最后一个字符，不然无法进行删除操作；</p><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;parameter/parttern/string&#125;</span><br></pre></td></tr></table></figure><p>用string来替换第一个匹配的pattern</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;parameter/#parttern/string&#125;</span><br></pre></td></tr></table></figure><p>从开头匹配parameter变量中的pattern，匹配上后就用string来替换匹配的pattern</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;parameter/%pattern/string&#125;</span><br></pre></td></tr></table></figure><p>从结尾开始匹配parameter变量中的pattern，匹配上后就用string替换匹配的pattern</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;parameter//pattern/string&#125;</span><br></pre></td></tr></table></figure><p>用string来替换parameter变量中所有匹配的pattern</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shell中字符串使用单、双引号均可:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell变量</title>
    <link href="http://yoursite.com/2017/08/15/Shell%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2017/08/15/Shell变量/</id>
    <published>2017-08-15T12:11:25.000Z</published>
    <updated>2018-09-03T09:55:19.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>shell语法使用#来注释内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#这是一段注释</span><br><span class="line"></span><br><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure></p><p>shell中没有多行注释，只有单行注释</p><h2 id="变量类型："><a href="#变量类型：" class="headerlink" title="变量类型："></a>变量类型：</h2><h3 id="类型一：本地变量"><a href="#类型一：本地变量" class="headerlink" title="类型一：本地变量"></a>类型一：本地变量</h3><p>作用域是整个bash进程<br>语法：<strong>name=”Mike”</strong></p><h3 id="类型二：局部变量"><a href="#类型二：局部变量" class="headerlink" title="类型二：局部变量"></a>类型二：局部变量</h3><p>作用域是当前代码段<br>语法：<strong>local name=”Sun”</strong></p><h3 id="类型三：环境变量"><a href="#类型三：环境变量" class="headerlink" title="类型三：环境变量"></a>类型三：环境变量</h3><p>作用域是当前shell进程以及子进程<br>语法：<strong>export name=””Dir</strong></p><h3 id="类型四：位置变量"><a href="#类型四：位置变量" class="headerlink" title="类型四：位置变量"></a>类型四：位置变量</h3><p>位置变量示例1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;xiaoming&quot;</span><br><span class="line">$&#123;name&#125;haha</span><br><span class="line"></span><br><span class="line">echo &quot;姓名：$&#123;name&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>位置变量示例2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#给脚本文件传递参数</span><br><span class="line">#参数$&#123;0&#125;是脚本文件名字，所以要从$&#123;1&#125;开始取值</span><br><span class="line">name=$&#123;1&#125;</span><br><span class="line">age=$&#123;2&#125;</span><br><span class="line">echo &quot;姓名：$&#123;name&#125;,年龄：$&#123;age&#125;&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#执行脚本，参数跟参数之间用空格间隔</span><br><span class="line">./hello.sh John 19</span><br></pre></td></tr></table></figure><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$&#123;0&#125;该位置变量为特殊变量，表示文件名字</span><br><span class="line">$#表示参数个数，注意：写作$&#123;#&#125;也可以，👇的同理</span><br><span class="line">$*表示参数列表：会将所有的参数组成一个字符串</span><br><span class="line">$@表示参数列表：所有的参数会分开</span><br><span class="line">$$表示获取当前shell的进程id</span><br><span class="line">$!表示执行上一个指令的进程id（PID）</span><br><span class="line">$&#123;?&#125;该位置变量表示返回上一个命令执行状态返回值：</span><br><span class="line">0：表示执行成功；</span><br><span class="line">1：表示程序执行的结果；</span><br><span class="line">2：表示程序状态的返回码（0-255</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;0&#125;</span><br><span class="line">echo $&#123;?&#125;</span><br><span class="line">#下面语法错误</span><br><span class="line">name = &quot;haah&quot;</span><br><span class="line">echo $&#123;?&#125;</span><br></pre></td></tr></table></figure><p>执行脚步后输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">./hello.sh: line 5: name: command not found</span><br><span class="line">127</span><br></pre></td></tr></table></figure></p><p>变量定义：<br>定义变量不适用💲符号，使用该符号表示取该变量的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#定义name变量</span><br><span class="line">name=&quot;xiaoming&quot;</span><br><span class="line"></span><br><span class="line">#取name值</span><br><span class="line">$name</span><br></pre></td></tr></table></figure></p><p>定义变量时，变量名和=符号之间不能有空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#错误写法</span><br><span class="line">name = &quot;xiaoming&quot;</span><br><span class="line">name =&quot;xiaoming&quot;</span><br><span class="line">name= &quot;xiaoming&quot;</span><br></pre></td></tr></table></figure></p><p>变量名首字母必须为字母(a-z,A-Z)或者下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=10</span><br><span class="line"></span><br><span class="line">echo $age</span><br></pre></td></tr></table></figure></p><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用关键字<strong>readonly</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;zhima&quot;</span><br><span class="line">readonly name</span><br></pre></td></tr></table></figure></p><h3 id="删除掉变量"><a href="#删除掉变量" class="headerlink" title="删除掉变量"></a>删除掉变量</h3><p>使用关键字<strong>unset</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;zhima&quot;</span><br><span class="line">unset name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;shell语法使用#来注释内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>初识Shell</title>
    <link href="http://yoursite.com/2017/08/15/%E5%88%9D%E8%AF%86Shell/"/>
    <id>http://yoursite.com/2017/08/15/初识Shell/</id>
    <published>2017-08-15T11:11:25.000Z</published>
    <updated>2018-09-03T09:47:05.146Z</updated>
    
    <content type="html"><![CDATA[<p>shell作为程序员与内核系统交流的中间件，语言有很多种类，常用的是Bash。</p><h2 id="创建一个简单的shell程序，输出helloworld："><a href="#创建一个简单的shell程序，输出helloworld：" class="headerlink" title="创建一个简单的shell程序，输出helloworld："></a>创建一个简单的shell程序，输出helloworld：</h2><p>创建shell文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.sh</span><br></pre></td></tr></table></figure></p><p>定义文件声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br></pre></td></tr></table></figure></p><p>(#!表示约定标记，告诉系统这个脚本需要什么样的解释器来执行，也是脚本的一种体现)<br>要执行的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;helllo world&quot;</span><br></pre></td></tr></table></figure></p><p>(echo是输出文本命令）<br>执行创建的这个脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.sh</span><br></pre></td></tr></table></figure></p><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>文件权限结构分为：<br>文件类型 （相当于qq群类型）<br>文件所有者 （相当于qq群的群主）<br>所有者同组用户（相当于qq群里的管理员）<br>其他用户 （相当于qq群里的群成员）<br>文件权限分为：<br><img src="shell1.jpeg" alt=""></p><h3 id="查看文件权限的命令："><a href="#查看文件权限的命令：" class="headerlink" title="查看文件权限的命令："></a>查看文件权限的命令：</h3><p><strong>ls -l 文件名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//例如</span><br><span class="line">ls -l hello.sh</span><br></pre></td></tr></table></figure></p><h3 id="修改文件权限的命令"><a href="#修改文件权限的命令" class="headerlink" title="修改文件权限的命令"></a>修改文件权限的命令</h3><p><strong>chmod + x ./文件名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//例如</span><br><span class="line">chmod +x ./hello.sh</span><br></pre></td></tr></table></figure></p><h3 id="执行脚本的命令"><a href="#执行脚本的命令" class="headerlink" title="执行脚本的命令"></a>执行脚本的命令</h3><p><strong>./文件名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//例如</span><br><span class="line">./hello.sh</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shell作为程序员与内核系统交流的中间件，语言有很多种类，常用的是Bash。&lt;/p&gt;
&lt;h2 id=&quot;创建一个简单的shell程序，输出helloworld：&quot;&gt;&lt;a href=&quot;#创建一个简单的shell程序，输出helloworld：&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
</feed>
